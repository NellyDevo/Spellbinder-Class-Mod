local __util = require 'larian.util'

function HasBattleMagic(entity)
    local entity = entity or context.Target
	local result = HasAnyStatus({'SPELLBINDER_EXTRA_ATTACK_CANTRIP', 'SPELLBINDER_EXTRA_ATTACK'},{},{}, entity, context.Source, false).Result
    return ConditionResult(result)
end

function SpellAutoResolveOnAllyWithDisadvantage(ability, dc, result)
    result = result or false
    local ally = Ally()
    if not ally.Result then
        local st = ~SavingThrow(ability, dc, false, true)
        return ConditionResult(st.Result,{},{},st.Chance)
    end
    return ConditionResult(result)
end

function CanQuickBind()
    if HasUseCosts('ActionPoint').Result and not HasUseCosts('BonusActionPoint').Result then
        local spellId = context.SpellModificationDescription.SpellId
        if spellId ~= "" and string.find(spellId, "Shout_Spellbinder_Bind") then
            return ConditionResult(true)
        end
    end
    return ConditionResult(false)
end

function GetBindCost()
    return context.HitDescription.SpellPowerLevel + 1
end

function BoundRangedSpellCheck()
    if HasPassive('Spellbinder_ArcaneSniper_TelekineticProjectiles',context.Source).Result then
        local mainHandEntity = GetItemInEquipmentSlot(EquipmentSlot.RangedMainHand, context.Source)
        if mainHandEntity.IsValid then
            return Tagged('SPELLBINDER_BOUND', mainHandEntity) & HasStringInSpellRoll('RangedWeaponAttack')
        end
    end
    return ConditionResult(false)
end

function BoundRangedOffHandSpellCheck()
    if HasPassive('Spellbinder_ArcaneSniper_TelekineticProjectiles',context.Source).Result then
        local offHandEntity = GetItemInEquipmentSlot(EquipmentSlot.RangedOffHand, context.Source)
        if offHandEntity.IsValid then
            return Tagged('SPELLBINDER_BOUND', offHandEntity) & HasStringInSpellRoll('RangedOffHandWeaponAttack') & ~HasStringInSpellRoll('RangedWeaponAttack')
        end
    end
    return ConditionResult(false)
end

function HasNoMediumOrHeavyArmor(entity)
    entity = entity or context.Target
    local armors = {GetItemInEquipmentSlot(EquipmentSlot.Helmet,entity),GetItemInEquipmentSlot(EquipmentSlot.Breast,entity),GetItemInEquipmentSlot(EquipmentSlot.Cloak,entity),GetItemInEquipmentSlot(EquipmentSlot.Boots,entity),GetItemInEquipmentSlot(EquipmentSlot.Gloves,entity)}
    local types = {ArmorType.Hide,ArmorType.ChainShirt,ArmorType.ScaleMail,ArmorType.BreastPlate,ArmorType.HalfPlate,ArmorType.RingMail,ArmorType.ChainMail,ArmorType.Splint,ArmorType.Plate}
    for _,armor in pairs(armors) do
        if armor and armor.IsValid then
            for _,type in pairs(types) do
                if armor.ArmorType == type then
                    return ConditionResult(false)
                end
            end
        end
    end
    return ConditionResult(true)
end

function ArrowOfForceCheck(entity)
    return SpellId('Projectile_Spellbinder_ArcaneSniper_ArrowOfForce')
end

function TryMysticDieBoost()
    local result = context.InterruptedRoll.Total
    local target = context.InterruptedRoll.Difficulty
    local num = Roll(1, DiceType.d8, 0)
    local newTotal = result + num
    local success = newTotal >= target
    local probability = 1.0-((target - result)/8)
    return ConditionResult(success,{},{},probability)
end

function IsThrownAttackEvenWithoutFinesse()
    return IsUnarmedAttack() & SpellTypeIs(SpellType.Throw)
end