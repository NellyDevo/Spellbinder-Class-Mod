-- ┌────────────────────────────────────┐
-- │ LogContextToConsole([contextData]) │ 
-- ╞════════════════════════════════════╧═════════════════════════════════════╕
-- │ ■ Author: Bluesatin                                                      │
-- │ ■ Source: https://next.nexusmods.com/profile/bluesatin/mods?gameId=3474  │
-- └──────────────────────────────────────────────────────────────────────────┘
-- This function takes a context-data entry (defaults to entire context), and logs it to the BG3-Toolkit console.
-- Will throw an error in the BG3-Toolkit console: 'Condition execution failed', open that error to inspect the data.
-- You can use Ctrl+A to select-all and copy the data into a JSON formatter to make it more readable.

-- Imports
local __util = require "larian.util"

-- Primary function for logging the current context info to the BG3-Toolkit console
-- @param input contextData: (optional) The context-data object you want to log (defaults to the entire context).
-- @return true: This function always returns true (although the condition will fail due to the error thrown).
function LogContextToConsole(contextData)
  -- Initialise
  local contextData = contextData or context or nil
  -- Add lines to debug
  local debugString = "\n"
  debugString = debugString .. string.format("[LogContextToConsole] (~JSON Format) =>\n")
  debugString = debugString .. string.format("%s\n", __ContextToString(contextData))
  -- Throw an error to log the data to the BG3-Toolkit console
  __util.Throw("%s", debugString)
  -- Return
  return ConditionResult(true)
end
-- Alternative function names (for usability)
LogContext = LogContextToConsole
DumpContext = LogContextToConsole
PrintContext = LogContextToConsole
DumpContextToConsole = LogContextToConsole
PrintContextToConsole = LogContextToConsole
InspectContext = LogContextToConsole

-- Function for converting a context-object into a serialized string
function __ContextToString(contextObject)
  -- Initialise
  local debugString = ""
  -- Add header
  debugString = debugString .. string.format("[%s] Contents: \n", contextObject)
  -- Dump context-data to new string, then combine it
  local contextString = __DataToString(__GetContextData(contextObject))
  if contextString then
    debugString = debugString .. string.format("%s\n", contextString)
  else
    debugString = debugString .. string.format("No contents found.\n")
  end
  -- Return
  return debugString
end

-- Function for converting an LUA table to a serialized string
-- (Outputs in a quasi-JSON format, so you can throw it through a JSON formatter)
function __DataToString(tableData)
  -- Function for recursively parsing tables
  local function parseToString(input)
    -- Initialise
    local first = true
    local result = "{" -- Add starting bracket
    -- Get a sorted key-list to log things in a better order
    local keyList = __GetSortedKeys(input)
    -- Iterate through the sorted key-list
    for i,key in pairs(keyList) do
      -- Get the value from the original table
      local value = input[key]
      -- Add preceding comma if it's not the first entry
      if not first then
        result = result .. ", "
      end
      first = false
      -- Serialize the key
      if type(key) == "number" then
        -- If it's just an array, don't add indexes
        result = result
      else
        -- Otherwise, use the key
        result = result .. string.format('"%s": ', key)
      end
      -- Serialize the value
      -- If it's a nested-table, recursively parse it
      if type(value) == "table" then
        result = result .. parseToString(value)
      else
        -- Otherwise, just wrap all other value-types in quotes (to avoid JSON parsing errors)
        result = result .. string.format('"%s"', value)
      end
    end
    -- Add closing bracket
    local result = result .. "}"
    -- Return
    return result
  end
  -- Iterate through the input table/object recursively
  return parseToString(tableData)
end

-- Function for grabbing the data from a context-data object
-- (Requires converting the UserData objects to tables)
function __GetContextData(contextData)
  -- Initialise
  local result
  -- If it's a misc data-type with a to-table function, convert it to a table first
  if type(contextData) ~= "table" and (getmetatable(contextData) and getmetatable(contextData).__totable) then
    contextData = getmetatable(contextData).__totable(contextData)
  end
  -- If it's a table, recursively call this function
  if type(contextData) == "table" then
    result = {}
    for k,v in pairs(contextData) do
      result[__GetContextData(k)] = __GetContextData(v)
    end
  -- Otherwise if it's just a normal variable, just copy the value
  else
    result = contextData
  end
  -- Return
  return result
end

-- Function for grabbing the meta-table info for context-data objects
-- (Was used for initial debugging)
function __GetContextMetatable(contextData)
  -- Initialise
  local result = {}
  -- Copy all the entries in the meta-table
  local meta = getmetatable(contextData)
  for key, value in pairs(meta) do
    result[key] = value
  end
  -- Return
  return result
end

-- Function for creating a sorted list of keys in a table 
-- (Used for parsing tables in a specific order)
function __GetSortedKeys(inputTable, priorityTable)
  -- Initialise
  local priorityTable = priorityTable or __SortPriorities
  -- If the input isn't a table, just return nothing
  if type(inputTable) ~= "table" then return end
  -- Otherwise, create an indexed-array of keys from the input-table
  local keys = {}
  for k in pairs(inputTable) do
    -- Insert a new entry to the indexed-array (e.g. [1] = "MyFirstKey", [2] = "MySecondKey")
    table.insert(keys, k)
  end
  -- Sort the new key-list based on the priority table
  table.sort(keys, function(a, b)
    -- Find priority, or default to placing it at the top if no match found (-math.huge)
    local priority_a = priorityTable[a] or -math.huge 
    local priority_b = priorityTable[b] or -math.huge
    -- If priorities are equal, sort alphabetically
    if priority_a == priority_b then
      return a < b
    else -- Otherwise, sort by priority value
      return priority_a < priority_b
    end
  end)
  -- Return
  return keys
end

-- Table for custom ordering the parsed data (for better readability)
__SortPriorities = {
  -- Generic
  ["IsValid"] = 101,
  ["name"] = 102,
  ["Name"] = 103,
  ["value"] = 104,
  ["Value"] = 105,
  -- Misc Data
  ["SpellId"] = 1001,
  ["SpellEvent"] = 1002,
  ["StatusId"] = 1003,
  ["StatusEvent"] = 1004,
  ["StatusRemoveCause"] = 1005,
  ["PassiveId"] = 1006,
  ["PassiveEvent"] = 1007,
  ["PassiveFunctorIndex"] = 1008,
  ["InterruptId"] = 1009,
  ["InterruptedRoll"] = 1010,
  -- Event Info (Checks)
  ["CheckedAbility"] = 2001,
  ["CheckedSkill"] = 2002,
  -- Event Info (Rolls)
  ["RollType"] = 3001,
  ["Ability"] = 3002,
  ["RollCritical"] = 3003,
  ["AdvantageState"] = 3004,
  -- Event Info (Modifications)
  ["SpellModificationDescription"] = 4001,
  ["TargetRadius"] = 4002,
  ["AreaRadius"] = 4003,
  ["NumberOfTargets"] = 4004,
  -- Event Info (Positional)
  ["Distance"] = 5001,
  ["Length"] = 5002,
  ["X"] = 5003,
  ["Y"] = 5004,
  ["Z"] = 5005,
  ["SourcePosition"] = 5101,
  ["TargetPosition"] = 5102,
  ["ObserverPosition"] = 5103,
  -- Event Info (Attack/Hit)
  ["PreferredCastingAbility"] = 6001,
  ["AttackDescription"] = 6002,
  ["HitDescription"] = 6003,
    ["GetDamageDoneForType"] = 6101,
    ["GetLastConditionRoll"] = 6102,
    ["IsDamagedAfterMiss"] = 6103,
    ["IsFromSneak"] = 6103,
    ["IsHitpointsDamaged"] = 6104,
    ["IsInstantKill"] = 6105,
    ["IsKillingBlow"] = 6106,
    ["IsReaction"] = 6107,
    ["FirstAttack"] = 6108,
    ["LastAttack"] = 6109,
    ["IsHit"] = 6110,
    ["IsMiss"] = 6111,
    ["IsCritical"] = 6112,
    ["IsCriticalHit"] = 6113,
    ["IsCriticalMiss"] = 6114,
    ["OriginalDamageValue"] = 6115,
    ["InitialHPPercentage"] = 6116,
    ["TotalHealDone"] = 6117,
    ["TotalDamageDone"] = 6118,
    ["SpellLevel"] = 6119,
    ["SpellPowerLevel"] = 6120,
    ["SpellSchool"] = 6121,
    ["AttackAbility"] = 6122,
    ["AttackType"] = 6123,
    ["CauseType"] = 6124,
    ["DeathType"] = 6125,
    ["HitWith"] = 6126,
    ["MainDamageType"] = 6127,
    ["SaveAbility"] = 6128,
  -- Entity Info
  ["Source"] = 9001,
  ["Target"] = 9002,
  ["Observer"] = 9003,
  ["Passive"] = 9004,
  ["SourceProxy"] = 9005,
  ["TargetProxy"] = 9006,
  ["ObserverProxy"] = 9007,
  ["AttackWeapon"] = 9008,
  ["InflicterObject"] = 9009,
  ["UsedItem"] = 9010,
  ["ThrownObject"] = 9011,
    -- Entity Info (Misc)
    ["Level"] = 9101,
    ["ProficiencyBonus"] = 9102,
    -- Entity Info (Health)
    ["IsInvulnerable"] = 9103,
    ["HP"] = 9104,
    ["HPWithoutTemporaryHP"] = 9105,
    ["MaxHP"] = 9106,
    ["MaxHPWithoutTemporaryHP"] = 9107,
    ["TemporaryHP"] = 9108,
    ["HPPercentage"] = 9109,
    ["HPPercentageWithoutTemporaryHP"] = 9110,
    -- Entity Info (Get Functions)
    ["GetClassLevel"] = 9121,
    ["GetPassiveSkill"] = 9122,
    ["GetSavingThrow"] = 9123,
    ["HasAnyResistances"] = 9124,
    ["HasAllResistances"] = 9125,
    -- Entity Info (Size/Weight)
    ["Weight"] = 9131,
    ["Size"] = 9132,
    -- Entity Info (Other)
    ["ArmorType"] = 9133,
    ["ActionTypes"] = 9134,
    ["EquipmentSlot"] = 9135,
    -- Entity Info (Abilities)
    ["Strength"] = 9141,
    ["Dexterity"] = 9142,
    ["Constitution"] = 9143,
    ["Intelligence"] = 9144,
    ["Wisdom"] = 9145,
    ["Charisma"] = 9146,
    -- Entity Info (Skills)
    ["Athletics"] = 9151,
    ["Acrobatics"] = 9152,
    ["SleightOfHand"] = 9153,
    ["Stealth"] = 9154,
    ["Arcana"] = 9155,
    ["History"] = 9156,
    ["Investigation"] = 9157,
    ["Nature"] = 9158,
    ["Religion"] = 9159,
    ["AnimalHandling"] = 9160,
    ["Insight"] = 9161,
    ["Medicine"] = 9162,
    ["Perception"] = 9163,
    ["Survival"] = 9164,
    ["Deception"] = 9165,
    ["Intimidation"] = 9166,
    ["Performance"] = 9167,
    ["Persuasion"] = 9168,
}
